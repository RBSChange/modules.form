<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<!-- Preferences sections -->
	<binding id="cCaptchaPreferencesSection" extends="layout.cDocumentEditor#cFieldsGroup">
		<resources>
			<stylesheet src="modules.uixul.cFieldsGroup" />
		</resources>
		<content>
			<xul:groupbox flex="1">
				<xul:caption xbl:inherits="label" />
				<xul:hbox>
					<xul:grid flex="1">
						<xul:columns>
							<xul:column />
							<xul:column flex="1" />
						</xul:columns>
						<xul:rows>
							<children />
						</xul:rows>
					</xul:grid>
					<xul:vbox align="center" flex="2" style="border-left: 3px dotted silver">
						<xul:spacer flex="2" />
						<xul:image anonid="captcha-preview" />
						<xul:spacer flex="1" />
						<xul:button anonid="refresh-captcha-button" label="&amp;modules.form.document.preferences.captcha.ReloadSpaced;" image="{IconsBase}/small/shadow/refresh.png" />
						<xul:spacer flex="2" />
					</xul:vbox>
				</xul:hbox>
			</xul:groupbox>
		</content>
		<implementation>
			<constructor><![CDATA[
					var _this = this;					
					var node = document.getAnonymousElementByAttribute(this, 'anonid', 'refresh-captcha-button');
					node.addEventListener('command', function () { _this.updateCaptchaPreview(); }, true);
			]]></constructor>
		
			<method name="updateCaptchaPreview">
				<parameter name="values" />
				<body><![CDATA[
					var panel = this.getPanel();
					var captchaFields = [ 'iw', 'ih', 'fs', 'fd', 'ml' ];
					var parameters = [ ];
					for (var i = 0; i < captchaFields.length; i++)
					{
						var name = captchaFields[i];
						parameters[name] = panel.fields[name].value;
					}
					parameters['renew'] = true;
					parameters['random'] = Math.random()*10000; // to ensure refresh each time.
					var url = wCore.buildeServerUrl('form', 'Captcha', parameters);
					var img = document.getAnonymousElementByAttribute(this, 'anonid', 'captcha-preview');
					img.setAttribute('src', url);
					img.setAttribute('width', parameters['iw']);
					img.setAttribute('height', parameters['ih']);
				]]></body>
			</method>
		</implementation>
		<handlers>			
			<handler event="fieldChanged"><![CDATA[
				this.updateCaptchaPreview();
			]]></handler>
		</handlers>
	</binding>
	
	<!-- Fields -->
	<binding id="cActivationConditionsSection" extends="layout.cDocumentEditor#cFieldsGroup">
		<implementation>
			<field name="mInitialized">false</field>
			
			<constructor><![CDATA[
				var me = this;
				this.getPanel().addEventListener('panelInitializeComplete', function () { me.loadQuestionList(); me.setActivation(); }, true);
			]]></constructor>
		
			<method name="loadQuestionList">
				<body><![CDATA[
					try
					{
						var panel = this.getPanel();
						var editor = panel.documentEditor;
						var questionField = panel.fields.activationQuestion;
						questionField.replaceItems({parentId: editor.parentid, documentId: editor.documentid, cmpref: 'modules_form/activationfields'});
					}
					catch (e)
					{
						wCore.error('cActivationConditionsSection.setActivation', [], e);
					}
				]]></body>
			</method>
		
			<method name="setActivation">
				<body><![CDATA[
					try
					{
						this.mInitialized = true;
						var panel = this.getPanel();
						var questionField = panel.fields.activationQuestion;
						var valueField = panel.fields.activationValue;
						var questionId = questionField.value;
						if (questionId != '')
						{
							valueField.disabled = false;
						}
						else
						{
							valueField.disabled = true;
							valueField.value = '';
						}				
						valueField.replaceItems({questionId: questionId});
					}
					catch (e)
					{
						wCore.error('cActivationConditionsSection.setActivation', [], e);
					}
				]]></body>
			</method>
		</implementation>
		<handlers>			
			<handler event="fieldChanged"><![CDATA[
				if (this.mInitialized && event.originalTarget.name == 'activationQuestion')
				{
					this.setActivation();
				}					
			]]></handler>
		</handlers>
	</binding>
	
	<!-- List field -->
	<binding id="cFieldNameChooserSection" extends="layout.cDocumentEditor#cFieldsGroup">
		<implementation>
			<field name="mInitialized">false</field>
			
			<constructor><![CDATA[
				var me = this;
				this.getPanel().addEventListener('panelInitializeComplete', function () { me.initAll(); }, true);
			]]></constructor>
		
			<method name="initAll">
				<body><![CDATA[
					try
					{
						this.mInitialized = true;
						var panel = this.getPanel();
						var fieldReceiver = panel.fields.isReceiver;
						var fieldFieldName = panel.fields.fieldName;
						var fieldRecommand = panel.fields.isRecommand;
						
						if (fieldReceiver.value == 'true')
						{
							fieldRecommand.value = '';
							fieldFieldName.value = 'receiverIds';
							fieldFieldName.disabled = true;
						}
						else if(fieldRecommand.value == 'site' || fieldRecommand.value == 'page')
						{
							fieldReceiver.value = 'false';
							fieldFieldName.value = 'recommandFeature';
							fieldFieldName.disabled = true;
						}
						else
						{
							fieldFieldName.disabled = false;
							if (fieldFieldName.value == 'receiverIds' || fieldFieldName.value == 'recommandFeature')
							{
								fieldFieldName.value = '';
							}
						}
					}
					catch (e)
					{
						wCore.error('cFieldNameChooserSection.initAll', [], e);
					}
				]]></body>
			</method>
			
			<method name="updateReceiver">
				<body><![CDATA[
					try
					{
						var panel = this.getPanel();
						var fieldReceiver = panel.fields.isReceiver;
						var fieldFieldName = panel.fields.fieldName;
						var fieldRecommand = panel.fields.isRecommand;
					
						var value = 'receiverIds';
						if (fieldReceiver.value == 'true')
						{
							fieldRecommand.value = '';
							fieldFieldName.value = value;
							fieldFieldName.disabled = true;
						}
						else
						{
							fieldFieldName.disabled = false;
							if (fieldFieldName.value == value)
							{
								fieldFieldName.value = '';
							}
						}
					}
					catch (e)
					{
						wCore.error('cFieldNameChooserSection.updateReceiver', [], e);
					}
				]]></body>
			</method>
			
			<method name="updateRecommand">
				<body><![CDATA[
					try
					{
						var panel = this.getPanel();
						var fieldReceiver = panel.fields.isReceiver;
						var fieldFieldName = panel.fields.fieldName;
						var fieldRecommand = panel.fields.isRecommand;
						
						var value = 'recommandFeature';
						if(fieldRecommand.value == 'site' || fieldRecommand.value == 'page')
						{
							fieldReceiver.value = 'false';
							fieldFieldName.value = value;
							fieldFieldName.disabled = true;
						}
						else
						{
							fieldFieldName.disabled = false;
							if(fieldFieldName.value == value)
							{
								fieldFieldName.value = '';
							}
						}
					}
					catch (e)
					{
						wCore.error('cFieldNameChooserSection.updateRecommand', [], e);
					}
				]]></body>
			</method>
		</implementation>
		<handlers>			
			<handler event="fieldChanged"><![CDATA[
				if (this.mInitialized)
				{
					if (event.originalTarget.name == 'isReceiver')
					{
						this.updateReceiver();
					}
					else if (event.originalTarget.name == 'isRecommand')
					{
						this.updateRecommand();
					}
				}
			]]></handler>
		</handlers>
	</binding>
	
	<!-- Hidden field -->
	<binding id="cBlankOptionChooserSection" extends="layout.cDocumentEditor#cFieldsGroup">
		<implementation>
			<field name="mInitialized">false</field>
			
			<constructor><![CDATA[
				var me = this;
				this.getPanel().addEventListener('panelInitializeComplete', function () { me.setBlankOption(); }, true);
			]]></constructor>
		
			<method name="setBlankOption">
				<body><![CDATA[
					try
					{
						this.mInitialized = true;
						var panel = this.getPanel();
						var hasBlankOption = panel.fields.hasBlankOption;
						
						if (panel.fields.multiple.value == 'true')
						{
							hasBlankOption.value = 'false';
							hasBlankOption.disabled = true;
						}
						else
						{
							hasBlankOption.disabled = false;
						}
					}
					catch (e)
					{
						wCore.error('cBlankOptionChooserSection.setBlankOption', [], e);
					}
				]]></body>
			</method>
		</implementation>
		<handlers>			
			<handler event="fieldChanged"><![CDATA[
				if (this.mInitialized && event.originalTarget.name == 'multiple')
				{
					this.setBlankOption();
				}
			]]></handler>
		</handlers>
	</binding>
	
	<!-- Text and email fields -->
	<binding id="cTextFieldConfiguratorSection" extends="layout.cDocumentEditor#cFieldsGroup">
		<implementation>
			<field name="mInitialized">false</field>
			
			<constructor><![CDATA[
				var me = this;
				this.getPanel().addEventListener('panelInitializeComplete', function () { me.updateMultiline(); }, true);
			]]></constructor>
		
			<method name="updateMultiline">
				<body><![CDATA[
					try
					{
						this.mInitialized = true;
						var panel = this.getPanel();						
						var rows = panel.fields.rows;
						var colsLabel = document.getAnonymousElementByAttribute(panel, 'control', panel.fields.cols.getAttribute('id'));
						
						if (panel.fields.multiline.value == 'true')
						{
							rows.disabled = false;
							if (rows.value == '' || rows.value == '0' || rows.value == '1')
							{
								rows.value = '2';
							}
							colsLabel.setAttribute('value', '&amp;modules.form.document.text.Cols;');
						}
						else
						{
							rows.disabled = true;
							rows.value = '1';
							colsLabel.setAttribute('value', '&amp;modules.form.document.text.Size;');
						}
					}
					catch (e)
					{
						wCore.error('cTextFieldConfiguratorSection.updateMultiline', [], e);
					}
				]]></body>
			</method>
		</implementation>
		<handlers>			
			<handler event="fieldChanged"><![CDATA[
				if (this.mInitialized && event.originalTarget.name == 'multiline')
				{
					this.updateMultiline();
				}
			]]></handler>
		</handlers>
	</binding>
	
	<!-- Recipient group creation from form -->	
	<binding id="cRecipientGroupArrayField" extends="form.cField#cDocumentArrayField">
		<implementation>
			<constructor><![CDATA[
				wCore.debug('cRecipientGroupArrayField.constructor');
				var helpButton = this.getElementByAnonId('helpbutton');
				var me = this;
				var button = document.createElement('toolbarbutton');
				button.setAttribute('image', '{IconsBase}/small/add.png');
				button.setAttribute('height', '16');
				button.setAttribute('tooltiptext', "&amp;modules.form.bo.actions.Create-RecipientGroupList;");
				button.addEventListener('command', function () { me.openCreationForm(); }, true);
				helpButton.parentNode.appendChild(button);
			]]></constructor>
			
			<method name="openCreationForm">
				<parameter name="listWidget" />
				<body><![CDATA[
		    		var uri = ['form', 'createRecipientGroup'].join(',');
					openActionUri(uri);
				]]></body>
			</method>
		</implementation>
	</binding>
	
	<!-- From responses dialog -->
	<binding id="cFormResponsesDialog" extends="core.wDialog#wDialog">
		<resources>
			<stylesheet src="modules.uixul.cFieldsGroup" />
			<stylesheet src="modules.form.cFormResponsesDialog" />
		</resources>
		<implementation>
			<method name="onInitialize">
				<body><![CDATA[
					this.loadData();
				]]></body>
			</method>
					
			<method name="loadData">
				<body><![CDATA[
					var result = wCore.executeJSON('form', 'ExportJSON', {cmpref: this.parameters.productId, pageSize: this.mPageSize, startIndex: this.mStartIndex }, null, true);
					if (result.status !== 'OK')
					{
						wToolkit.setNotificationMessage(result.contents.errorMessage, wToolkit.ERROR);
						this.onCancel();
						retrun;
					}
					this.resizeTo(window.innerWidth-100, window.innerHeight-100);
					
					var contents = result.contents;
					var responses = contents.responsesInfos;
					var responsesNode = this.getElementByAnonId('responses');
					for (var i = 0; i < responses.length; i++)
					{
						var section = responsesNode.childNodes[i];
						if (section == null)
						{
							section = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'section');
							section.className = 'response';
							section.panel = this;
							responsesNode.appendChild(section);
						}
						else
						{
							section.removeAttribute('collapsed');
						}
						
						this.setupResponse(section, responses[i]);
					}
					while (section = responsesNode.childNodes[i])
					{
						section.setAttribute('collapsed', 'true');
						i++;
					}
					
					this.mStartIndex = contents.startIndex;
					this.mDocumentTotal = contents.count;
					this.mRowCount = contents.responsesInfos.length;
					this.getElementByAnonId('paginator').updateNavigation(this);
				]]></body>
			</method>
						
			<method name="setupResponse">
				<parameter name="section" />
				<parameter name="response" />
				<body><![CDATA[
					for (var name in response)
					{
						if (name != 'contents')
						{
							section.setAttribute(name, response[name]);
							if (response[name] && response[name] != '')
							{
								section.removeAttribute(name+'hidden');
							}
							else
							{
								section.setAttribute(name+'hidden', true);
							}
						}
					}
					
					while (section.firstChild)
					{
						section.removeChild(section.firstChild);
					}

					var contentSection = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'section');
					contentSection.className = 'responseContent';
					section.appendChild(contentSection);
					
					var contents = response.contents;
					wCore.executeOnMethodExists(contentSection, 'setupContents', function (section) { contentSection.setupContents(section, contents); });
				]]></body>
			</method>
			
			<method name="onCancel">
				<body><![CDATA[
					this.parameters.module.refreshMainViewDeck();
					this.controller.closeModalDialog();
				]]></body>
			</method>
			
			<method name="refresh">
				<body><![CDATA[
					this.loadData();
				]]></body>
			</method>
			
			<field name="mPageSize">5</field>
			<field name="mStartIndex">0</field>
			<field name="mDocumentTotal">0</field>
			<field name="mRowCount">0</field>
			
			<method name="navigate">
				<parameter name="startIndex" />
				<body><![CDATA[
					this.mStartIndex = startIndex;
					this.loadData();
				]]></body>
			</method>
		</implementation>
		<content>
			<xul:vbox flex="1">
				<xul:vbox class="dialog-header-container">
					<xul:hbox class="dialog-header">
						<xul:label value="&amp;modules.form.bo.dialog.Form-responses;" class="dialog-title" />
						<xul:spacer flex="1" />
						<xul:vbox pack="center">
							<xul:toolbarbutton height="24" width="24" image="{IconsBase}/small/delete.png" oncommand="onCancel();" tooltiptexts="&amp;modules.uixul.bo.dialog.Cancel;" />
						</xul:vbox>
					</xul:hbox>
				</xul:vbox>
				<xul:hbox class="change-toolbox" anonid="paginator-container">
					<xul:spacer flex="1" />
					<xul:cpaginator anonid="paginator" hideseparator="true" />
					<xul:spacer flex="1" />
				</xul:hbox>
				<xul:scrollbox flex="1" orient="vertical">
					<xul:vbox flex="1" anonid="responses" />
				</xul:scrollbox>
			</xul:vbox>
		</content>
	</binding>
	
	<binding id="cFormResponse">
		<resources>
			<stylesheet src="modules.uixul.cFieldsGroup" />
			<stylesheet src="modules.form.cFormResponsesDialog" />
		</resources>
		<content>
			<xul:groupbox flex="1">
				<xul:caption flex="1">
					<xul:label xbl:inherits="value=formattedDate" />
				</xul:caption>
				<xul:vbox flex="1"><xbl:children /></xul:vbox>
			</xul:groupbox>
		</content>
	</binding>
	
	<binding id="cResponseDataResumeSection" extends="layout.cDocumentEditor#cResumeSection">
		<implementation>
			<method name="setValues">
				<parameter name="values" />
				<body><![CDATA[
					var section = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'section');
					section.className = 'responseContent';
					this.appendChild(section);
				
					var me = this;
					var contents = values[this.name].contents;
					wCore.executeOnMethodExists(section, 'setupContents', function (section) { section.setupContents(me, contents); });
				]]></body>
			</method>
			
			<method name="clearValues">
				<body><![CDATA[
					while (this.firstChild)
					{
						this.removeChild(this.firstChild);
					}
				]]></body>
			</method>
		</implementation>
	</binding>
	
	<binding id="cFormResponseContent">
		<resources>
			<stylesheet src="modules.form.cFormResponsesDialog" />
		</resources>
		<implementation>			
			<method name="setupContents">
				<parameter name="parentSection" />
				<parameter name="contents" />
				<body><![CDATA[
					for (var i = 0; i < contents.length ; i++)
					{
						var row = contents[i];
						var section = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'section');
						if (row.isGroup)
						{
							section.className = 'group';
							this.setupContents(section, row.contents);
						}
						else if('isFile' in row && row.isFile)
						{
							section.className = 'file-field';
							section.setAttribute('href', row.href);
							section.setAttribute('linklabel', row.linklabel);
						}
						else
						{
							section.className = 'field';
							if (row.mailValue)
							{
								section.appendChild(document.createTextNode(row.mailValue.replace(/<br \/>/g, '').replace(/&amp;/g, '&').replace(/&quot;/g, '"').replace(/&lt;/g, '<').replace(/&gt;/g, '>')));
							}
							else
							{
								section.appendChild(document.createTextNode('-'));
							}
						}
						section.setAttribute('label', row.label);
						parentSection.appendChild(section);
					}
				]]></body>
			</method>
		</implementation>
		<content>
			<xul:vbox flex="1"><xbl:children /></xul:vbox>
		</content>
	</binding>
	
	<binding id="cFormResponseFieldRow">
		<resources>
			<stylesheet src="modules.form.cFormResponsesDialog" />
		</resources>
		<content>
			<xul:hbox flex="1">
				<xul:label xbl:inherits="value=label" />
				<xul:label value=":" />
				<xul:description style="-moz-user-select: text; -moz-user-focus: normal; white-space: pre"><xbl:children /></xul:description>
			</xul:hbox>
		</content>
	</binding>
	
	<binding id="cFormResponseFileFieldRow">
		<resources>
			<stylesheet src="modules.form.cFormResponsesDialog" />
		</resources>
		<content>
			<xul:hbox flex="1">
				<xul:label xbl:inherits="value=label" />
				<xul:label value=":" />
				<xul:label class="text-link" xbl:inherits="value=linklabel" onclick="document.getBindingParent(this).click();" />
			</xul:hbox>
		</content>
		<implementation>
			<method name="click">
				<body><![CDATA[
					wToolkit.downloadurl(this.getAttribute('href'));
				]]></body>
			</method>
		</implementation>
	</binding>
	
	<binding id="cFormResponseGroupRow">
		<resources>
			<stylesheet src="modules.form.cFormResponsesDialog" />
		</resources>
		<content>
			<xul:vbox flex="1">
				<xul:label xbl:inherits="value=label" />
				<xul:vbox class="group-content" flex="1"><xbl:children /></xul:vbox>
			</xul:vbox>
		</content>
	</binding>
</bindings>