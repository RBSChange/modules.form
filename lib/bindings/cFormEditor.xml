<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<!-- Preferences sections -->
	<binding id="cCaptchaPreferencesSection" extends="layout.cDocumentEditor#cFieldsGroup">
		<resources>
			<stylesheet src="modules.uixul.cFieldsGroup" />
		</resources>
		<content>
			<xul:groupbox flex="1">
				<xul:caption xbl:inherits="label" />
				<xul:hbox>
					<xul:grid flex="1">
						<xul:columns>
							<xul:column />
							<xul:column flex="1" />
						</xul:columns>
						<xul:rows>
							<children />
						</xul:rows>
					</xul:grid>
					<xul:vbox align="center" flex="2" style="border-left: 3px dotted silver">
						<xul:spacer flex="2" />
						<xul:image anonid="captcha-preview" />
						<xul:spacer flex="1" />
						<xul:button anonid="refresh-captcha-button" label="&amp;modules.form.document.preferences.captcha.ReloadSpaced;" image="{IconsBase}/small/shadow/refresh.png" />
						<xul:spacer flex="2" />
					</xul:vbox>
				</xul:hbox>
			</xul:groupbox>
		</content>
		<implementation>
			<constructor><![CDATA[
					var _this = this;					
					var node = document.getAnonymousElementByAttribute(this, 'anonid', 'refresh-captcha-button');
					node.addEventListener('command', function () { _this.updateCaptchaPreview(); }, true);
			]]></constructor>
		
			<method name="updateCaptchaPreview">
				<parameter name="values" />
				<body><![CDATA[
					var panel = this.getPanel();
					var captchaFields = [ 'iw', 'ih', 'fs', 'fd', 'ml' ];
					var parameters = [ ];
					for (var i = 0; i < captchaFields.length; i++)
					{
						var name = captchaFields[i];
						parameters[name] = panel.fields[name].value;
					}
					parameters['renew'] = true;
					parameters['random'] = Math.random()*10000; // to ensure refresh each time.
					var url = wCore.buildeServerUrl('form', 'Captcha', parameters);
					var img = document.getAnonymousElementByAttribute(this, 'anonid', 'captcha-preview');
					img.setAttribute('src', url);
					img.setAttribute('width', parameters['iw']);
					img.setAttribute('height', parameters['ih']);
				]]></body>
			</method>
		</implementation>
		<handlers>			
			<handler event="fieldChanged"><![CDATA[
				this.updateCaptchaPreview();
			]]></handler>
		</handlers>
	</binding>
	
	<!-- Fields -->
	<binding id="cActivationConditionsSection" extends="layout.cDocumentEditor#cFieldsGroup">
		<implementation>
			<field name="mInitialized">false</field>
			
			<constructor><![CDATA[
				var me = this;
				this.getPanel().addEventListener('panelInitializeComplete', function () { me.loadQuestionList(); me.setActivation(); }, true);
			]]></constructor>
		
			<method name="loadQuestionList">
				<body><![CDATA[
					try
					{
						var panel = this.getPanel();
						var editor = panel.documentEditor;
						var questionField = panel.fields.activationQuestion;
						questionField.replaceItems({parentId: editor.parentid, documentId: editor.documentid, cmpref: 'modules_form/activationfields'});
					}
					catch (e)
					{
						wCore.error('cActivationConditionsSection.setActivation', [], e);
					}
				]]></body>
			</method>
		
			<method name="setActivation">
				<body><![CDATA[
					try
					{
						this.mInitialized = true;
						var panel = this.getPanel();
						var questionField = panel.fields.activationQuestion;
						var valueField = panel.fields.activationValue;
						var questionId = questionField.value;
						if (questionId != '')
						{
							valueField.disabled = false;
						}
						else
						{
							valueField.disabled = true;
							valueField.value = '';
						}				
						valueField.replaceItems({questionId: questionId});
					}
					catch (e)
					{
						wCore.error('cActivationConditionsSection.setActivation', [], e);
					}
				]]></body>
			</method>
		</implementation>
		<handlers>			
			<handler event="fieldChanged"><![CDATA[
				if (this.mInitialized && event.originalTarget.name == 'activationQuestion')
				{
					this.setActivation();
				}					
			]]></handler>
		</handlers>
	</binding>
	
	<!-- List field -->
	<binding id="cFieldNameChooserSection" extends="layout.cDocumentEditor#cFieldsGroup">
		<implementation>
			<field name="mInitialized">false</field>
			
			<constructor><![CDATA[
				var me = this;
				this.getPanel().addEventListener('panelInitializeComplete', function () { me.initAll(); }, true);
			]]></constructor>
		
			<method name="initAll">
				<body><![CDATA[
					try
					{
						this.mInitialized = true;
						var panel = this.getPanel();
						var fieldReceiver = panel.fields.isReceiver;
						var fieldFieldName = panel.fields.fieldName;
						var fieldRecommand = panel.fields.isRecommand;
						
						if (fieldReceiver.value == 'true')
						{
							fieldRecommand.value = '';
							fieldFieldName.value = 'receiverIds';
							fieldFieldName.disabled = true;
						}
						else if(fieldRecommand.value == 'site' || fieldRecommand.value == 'page')
						{
							fieldReceiver.value = 'false';
							fieldFieldName.value = 'recommandFeature';
							fieldFieldName.disabled = true;
						}
						else
						{
							fieldFieldName.disabled = false;
							if (fieldFieldName.value == 'receiverIds' || fieldFieldName.value == 'recommandFeature')
							{
								fieldFieldName.value = '';
							}
						}
					}
					catch (e)
					{
						wCore.error('cFieldNameChooserSection.initAll', [], e);
					}
				]]></body>
			</method>
			
			<method name="updateReceiver">
				<body><![CDATA[
					try
					{
						var panel = this.getPanel();
						var fieldReceiver = panel.fields.isReceiver;
						var fieldFieldName = panel.fields.fieldName;
						var fieldRecommand = panel.fields.isRecommand;
					
						var value = 'receiverIds';
						if (fieldReceiver.value == 'true')
						{
							fieldRecommand.value = '';
							fieldFieldName.value = value;
							fieldFieldName.disabled = true;
						}
						else
						{
							fieldFieldName.disabled = false;
							if (fieldFieldName.value == value)
							{
								fieldFieldName.value = '';
							}
						}
					}
					catch (e)
					{
						wCore.error('cFieldNameChooserSection.updateReceiver', [], e);
					}
				]]></body>
			</method>
			
			<method name="updateRecommand">
				<body><![CDATA[
					try
					{
						var panel = this.getPanel();
						var fieldReceiver = panel.fields.isReceiver;
						var fieldFieldName = panel.fields.fieldName;
						var fieldRecommand = panel.fields.isRecommand;
						
						var value = 'recommandFeature';
						if(fieldRecommand.value == 'site' || fieldRecommand.value == 'page')
						{
							fieldReceiver.value = 'false';
							fieldFieldName.value = value;
							fieldFieldName.disabled = true;
						}
						else
						{
							fieldFieldName.disabled = false;
							if(fieldFieldName.value == value)
							{
								fieldFieldName.value = '';
							}
						}
					}
					catch (e)
					{
						wCore.error('cFieldNameChooserSection.updateRecommand', [], e);
					}
				]]></body>
			</method>
		</implementation>
		<handlers>			
			<handler event="fieldChanged"><![CDATA[
				if (this.mInitialized)
				{
					if (event.originalTarget.name == 'isReceiver')
					{
						this.updateReceiver();
					}
					else if (event.originalTarget.name == 'isRecommand')
					{
						this.updateRecommand();
					}
				}
			]]></handler>
		</handlers>
	</binding>
	
	<!-- Hidden field -->
	<binding id="cBlankOptionChooserSection" extends="layout.cDocumentEditor#cFieldsGroup">
		<implementation>
			<field name="mInitialized">false</field>
			
			<constructor><![CDATA[
				var me = this;
				this.getPanel().addEventListener('panelInitializeComplete', function () { me.setBlankOption(); }, true);
			]]></constructor>
		
			<method name="setBlankOption">
				<body><![CDATA[
					try
					{
						this.mInitialized = true;
						var panel = this.getPanel();
						var hasBlankOption = panel.fields.hasBlankOption;
						
						if (panel.fields.multiple.value == 'true')
						{
							hasBlankOption.value = 'false';
							hasBlankOption.disabled = true;
						}
						else
						{
							hasBlankOption.disabled = false;
						}
					}
					catch (e)
					{
						wCore.error('cBlankOptionChooserSection.setBlankOption', [], e);
					}
				]]></body>
			</method>
		</implementation>
		<handlers>			
			<handler event="fieldChanged"><![CDATA[
				if (this.mInitialized && event.originalTarget.name == 'multiple')
				{
					this.setBlankOption();
				}
			]]></handler>
		</handlers>
	</binding>
	
	<!-- Text and email fields -->
	<binding id="cTextFieldConfiguratorSection" extends="layout.cDocumentEditor#cFieldsGroup">
		<implementation>
			<field name="mInitialized">false</field>
			
			<constructor><![CDATA[
				var me = this;
				this.getPanel().addEventListener('panelInitializeComplete', function () { me.updateMultiline(); }, true);
			]]></constructor>
		
			<method name="updateMultiline">
				<body><![CDATA[
					try
					{
						this.mInitialized = true;
						var panel = this.getPanel();						
						var rows = panel.fields.rows;
						var colsLabel = document.getAnonymousElementByAttribute(panel, 'control', panel.fields.cols.getAttribute('id'));
						
						if (panel.fields.multiline.value == 'true')
						{
							rows.disabled = false;
							if (rows.value == '' || rows.value == '0' || rows.value == '1')
							{
								rows.value = '2';
							}
							colsLabel.setAttribute('value', '&amp;modules.form.document.text.Cols;');
						}
						else
						{
							rows.disabled = true;
							rows.value = '1';
							colsLabel.setAttribute('value', '&amp;modules.form.document.text.Size;');
						}
					}
					catch (e)
					{
						wCore.error('cTextFieldConfiguratorSection.updateMultiline', [], e);
					}
				]]></body>
			</method>
		</implementation>
		<handlers>			
			<handler event="fieldChanged"><![CDATA[
				if (this.mInitialized && event.originalTarget.name == 'multiline')
				{
					this.updateMultiline();
				}
			]]></handler>
		</handlers>
	</binding>
	
	<!-- Recipient group creation from form -->	
	<binding id="cRecipientGroupArrayField" extends="form.cField#cDocumentArrayField">
		<implementation>
			<constructor><![CDATA[
				wCore.debug('cRecipientGroupArrayField.constructor');
				var helpButton = this.getElementByAnonId('helpbutton');
				var me = this;
				var button = document.createElement('toolbarbutton');
				button.setAttribute('image', '{IconsBase}/small/add.png');
				button.setAttribute('height', '16');
				button.setAttribute('tooltiptext', "&amp;modules.form.bo.actions.Create-RecipientGroupList;");
				button.addEventListener('command', function () { me.openCreationForm(); }, true);
				helpButton.parentNode.appendChild(button);
			]]></constructor>
			
			<method name="openCreationForm">
				<parameter name="listWidget" />
				<body><![CDATA[
		    		var uri = ['form', 'createRecipientGroup'].join(',');
					openActionUri(uri);
				]]></body>
			</method>
		</implementation>
	</binding>
	
	<!-- From responses dialog -->
	<binding id="cFormResponsesDialog" extends="core.wDialog#wDialog">
		<resources>
			<stylesheet src="modules.uixul.cFieldsGroup" />
			<stylesheet src="modules.form.cFormResponsesDialog" />
		</resources>
		<implementation>
			<constructor><![CDATA[
				wCore.debug('cFormResponsesDialog.constructor');
			]]></constructor>
			
			<method name="onInitialize">
				<body><![CDATA[
					var result = wCore.executeJSON('form', 'ExportJSON', {cmpref: this.parameters.productId, pageSize: this.mPageSize, startIndex: this.mStartIndex }, null, true);
					if (result.status !== 'OK')
					{
						wToolkit.setNotificationMessage(result.contents.errorMessage, wToolkit.ERROR);
						this.onCancel();
						retrun;
					}
					
					this.resizeTo(window.innerWidth-100, window.innerHeight-100);
					var responses = result.contents.responsesInfos;
					var responsesNode = this.getElementByAnonId('responses');
					for (var i = 0; i < responses.length; i++)
					{
						var response = responses[i];
						var section = responsesNode.childNodes[i];
						if (section == null)
						{
							section = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'section');
							section.className = 'response';
							section.panel = this;
							responsesNode.appendChild(section);
						}
						else
						{
							section.removeAttribute('collapsed');
							while (section.firstChild)
							{
								section.removeChild(section.firstChild);
							}
						}
						
						for (var name in response)
						{
							if (name == 'contents')
							{
								this.setupContents(section, response[name]);
							}
							else
							{
								section.setAttribute(name, response[name]);
								if (response[name] && response[name] != '')
								{
									section.removeAttribute(name+'hidden');
								}
								else
								{
									section.setAttribute(name+'hidden', true);
								}
							}
						}
					}
					while (section = responsesNode.childNodes[i])
					{
						section.setAttribute('collapsed', 'true');
						i++;
					}
					this.updateNavigation(result.contents);
				]]></body>
			</method>
			
			<method name="setupContents">
				<parameter name="parentSection" />
				<parameter name="contents" />
				<body><![CDATA[
					for (var i = 0; i < contents.length ; i++)
					{
						var row = contents[i];
						var section = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'section');
						if (row.isGroup)
						{
							section.className = 'group';
							section.setAttribute('label', row.label);
							this.setupContents(section, row.contents);
						}
						else
						{
							section.className = 'field';
							section.setAttribute('label', row.label);
							if (row.value)
							{
								section.appendChild(document.createTextNode(row.value));
							}
							else
							{
								section.appendChild(document.createTextNode('-'));
							}
						}
						parentSection.appendChild(section);
					}
				]]></body>
			</method>
			
			<method name="onCancel">
				<body><![CDATA[
					this.parameters.module.refreshMainViewDeck();
					this.controller.closeModalDialog();
				]]></body>
			</method>
			
			<method name="refresh">
				<body><![CDATA[
					this.onInitialize();
				]]></body>
			</method>
			
			<field name="mPageSize">5</field>
			<field name="mDocumentTotal">0</field>
			<field name="mStartIndex">0</field>
			<field name="mEndIndex">0</field>
			
			<method name="updateNavigation">
				<parameter name="contents" />
				<body><![CDATA[
					this.mDocumentTotal = parseInt(contents.total);
					this.mStartIndex = parseInt(contents.startIndex);
					
					var viewDoc = contents.responsesInfos.length;
					this.mEndIndex = this.mStartIndex + viewDoc;
	
					this.getElementByAnonId('navigationtotal').value = this.mDocumentTotal;
					var disableBack = (this.mStartIndex == 0);
					this.getElementByAnonId('navigationbegin').disabled = disableBack;
					this.getElementByAnonId('navigationback2').disabled = disableBack;
					this.getElementByAnonId('navigationback').disabled = disableBack;
					var disableNext = (this.mEndIndex >= this.mDocumentTotal);
					this.getElementByAnonId('navigationnext').disabled = disableNext;
					this.getElementByAnonId('navigationnext2').disabled = disableNext;
					this.getElementByAnonId('navigationend').disabled = disableNext;
					
					var navigationindex = this.getElementByAnonId('navigationindex');
					navigationindex.value = (this.mStartIndex + 1) + ' - ' + (this.mStartIndex + viewDoc);
				]]></body>
			</method>

			<method name="navigateBegin">
				<body><![CDATA[
					this.mStartIndex = 0;
					this.refresh();
				]]></body>
			</method>

			<method name="navigateBack">
				<parameter name="quick" />
				<body><![CDATA[
					this.mStartIndex -= this.mPageSize;
					if (quick && (this.mStartIndex - (5 * this.mPageSize) >= 0))
					{
						this.mStartIndex -= (5 * this.mPageSize);
					}
					this.refresh();
				]]></body>
			</method>

			<method name="navigateNext">
				<parameter name="quick" />
				<body><![CDATA[
					this.mStartIndex += this.mPageSize;
					if (quick && (this.mStartIndex + (5 * this.mPageSize) < this.mDocumentTotal))
					{
						this.mStartIndex += (5 * this.mPageSize);
					}
					this.refresh();
				]]></body>
			</method>

			<method name="navigateEnd">
				<body><![CDATA[
					this.mStartIndex = this.mDocumentTotal - (this.mDocumentTotal % this.mPageSize);
					if (this.mStartIndex == this.mDocumentTotal)
					{
						this.mStartIndex -= this.mPageSize;
					}
					this.refresh();
				]]></body>
			</method>
		</implementation>
		<content>
			<xul:vbox flex="1">
				<xul:hbox class="dialog-header">
					<xul:label value="&amp;modules.form.bo.dialog.Form-responses;" class="dialog-title" />
					<xul:spacer flex="1" />
					<xul:toolbarbutton anonid="navigationbegin" disabled="true" oncommand="navigateBegin()" image="{IconsBase}/small/control-begin.png" tooltiptext="&amp;modules.uixul.bo.general.Navigate-begin;" />
					<xul:toolbarbutton anonid="navigationback2" disabled="true" oncommand="navigateBack(true)" image="{IconsBase}/small/control-double-backward.png" tooltiptext="&amp;modules.uixul.bo.general.Navigate-back-quick;" />
					<xul:toolbarbutton anonid="navigationback" disabled="true" oncommand="navigateBack()" image="{IconsBase}/small/control-backward.png" tooltiptext="&amp;modules.uixul.bo.general.Navigate-back;" />
					<xul:hbox align="center">
						<xul:label anonid="navigationpagelabel" value="&amp;modules.uixul.bo.general.Documents;" />
						<xul:label anonid="navigationindex" value="0" />
						<xul:label anonid="navigationpageseparator" value="&amp;modules.uixul.bo.general.out-of;" />
						<xul:label anonid="navigationtotal" value="0" />
					</xul:hbox>
					<xul:toolbarbutton anonid="navigationnext" disabled="true" oncommand="navigateNext()" image="{IconsBase}/small/control-forward.png" tooltiptext="&amp;modules.uixul.bo.general.Navigate-next;" />
					<xul:toolbarbutton anonid="navigationnext2" disabled="true" oncommand="navigateNext(true)" image="{IconsBase}/small/control-double-forward.png" tooltiptext="&amp;modules.uixul.bo.general.Navigate-next-quick;" />
					<xul:toolbarbutton anonid="navigationend" disabled="true" oncommand="navigateEnd()" image="{IconsBase}/small/control-end.png" tooltiptext="&amp;modules.uixul.bo.general.Navigate-end;" />
					<xul:spacer flex="1" />
					<xul:vbox pack="center">
						<xul:toolbarbutton height="16" width="16" image="{IconsBase}/small/delete.png" oncommand="onCancel();" tooltiptexts="&amp;modules.uixul.bo.dialog.Cancel;" />
					</xul:vbox>
				</xul:hbox>
				<xul:scrollbox flex="1" orient="vertical">
					<xul:vbox flex="1" anonid="responses" />
				</xul:scrollbox>
			</xul:vbox>
		</content>
	</binding>
	
	<binding id="cFormResponse">
		<resources>
			<stylesheet src="modules.uixul.cFieldsGroup" />
			<stylesheet src="modules.form.cFormResponsesDialog" />
		</resources>
		<implementation>
			<constructor><![CDATA[
				wCore.debug('cFormResponse.constructor');
			]]></constructor>
		</implementation>
		<content>
			<xul:groupbox flex="1">
				<xul:caption flex="1">
					<xul:label xbl:inherits="value=formattedDate" />
				</xul:caption>
				<xul:vbox flex="1">
					<xbl:children />
				</xul:vbox>
			</xul:groupbox>
		</content>
	</binding>
	
	<binding id="cFormResponseFieldRow">
		<resources>
			<stylesheet src="modules.form.cFormResponsesDialog" />
		</resources>
		<content>
			<xul:vbox flex="1">
				<xul:label xbl:inherits="value=label" />
				<xul:description style="-moz-user-select: text; -moz-user-focus: normal">
					<xbl:children />
				</xul:description>
			</xul:vbox>
		</content>
	</binding>
	
	<binding id="cFormResponseGroupRow">
		<resources>
			<stylesheet src="modules.form.cFormResponsesDialog" />
		</resources>
		<content>
			<xul:vbox flex="1">
				<xul:label xbl:inherits="value=label" />
				<xul:vbox class="group-content" flex="1">
					<xbl:children />
				</xul:vbox>
			</xul:vbox>
		</content>
	</binding>
</bindings>